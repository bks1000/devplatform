#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
参考http://blog.csdn.net/laozitianxia/article/details/50682100
(首先建立github账号 359546407@qq.com)

1.进入项目目录
2.cmd -> git gui->Repository->git Bash
3.${symbol_dollar} git init	${symbol_pound}会创建.git文件夹
4.为了把本地的仓库传到github，还需要配置ssh key。
	${symbol_dollar} ssh-keygen -t rsa -C "359546407@qq.com"
	直接点回车，说明会在默认文件id_rsa上生成ssh key。
	然后系统要求输入密码，直接按回车表示不设密码
	重复密码时也是直接回车，之后提示你shh key已经生成成功。

5.记事本打开C:${symbol_escape}Users${symbol_escape}lenovo${symbol_escape}.ssh${symbol_escape}id_rsa.pub 全部复制
6.回到github网站，进入Account Settings，左边选择SSH Keys，Add SSH Key,
	title随便填，粘贴key。
7.验证是否成功，在git bash下输入
	${symbol_dollar} ssh -T git@github.com
	回车就会看到：You’ve successfully authenticated, but GitHub does not provide shell 	access 。这就表示已成功连上github。
8.接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们
	${symbol_dollar} git config --global user.name "your name"
	${symbol_dollar} git config --global user.email "your_email@youremail.com"
9.进入要上传的仓库，右键git bash，添加远程地址
	${symbol_dollar} git remote add origin git@github.com:yourName/yourRepo.git
	后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开	config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改	config来配置远程地址。与github上的对应.
10.添加一个文件并提交
	${symbol_dollar} git add README
	${symbol_dollar} git commit -m "first commit"
11.上传到github
	${symbol_dollar} git push origin master
	
	git push命令会将本地仓库推送到远程服务器。
	git pull命令则相反。

	注：首次提交，先git pull下，修改完代码后，使用git status可以查看文件的差别，使用git add 		添加要commit的文件。
大功告成，现在你知道如何将本地的项目提交到github上了。


${symbol_pound}https://github.com/bks1000/javaweb.git

gitignore文件

.gitignore顾名思义就是告诉git需要忽略的文件，这是一个很重要并且很实用的文件。一般我们写完代码后会执行编译、调试等操作，这期间会产生很多中间文件和可执行文件，这些都不是代码文件，是不需要git来管理的。我们在git status的时候会看到很多这样的文件，如果用git add -A来添加的话会把他们都加进去，而手动一个个添加的话也太麻烦了。这时我们就需要.gitignore了。



Git命令

查看、添加、提交、删除、找回，重置修改文件

git help <command> ${symbol_pound} 显示command的help

git show ${symbol_pound} 显示某次提交的内容 git show ${symbol_dollar}id

git co -- <file> ${symbol_pound} 抛弃工作区修改

git co . ${symbol_pound} 抛弃工作区修改

git add <file> ${symbol_pound} 将工作文件修改提交到本地暂存区

git add . ${symbol_pound} 将所有修改过的工作文件提交暂存区

git rm <file> ${symbol_pound} 从版本库中删除文件

git rm <file> --cached ${symbol_pound} 从版本库中删除文件，但不删除文件

git reset <file> ${symbol_pound} 从暂存区恢复到工作文件

git reset -- . ${symbol_pound} 从暂存区恢复到工作文件

git reset --hard ${symbol_pound} 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci <file> git ci . git ci -a ${symbol_pound} 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am "some comments"

git ci --amend ${symbol_pound} 修改最后一次提交记录

git revert <${symbol_dollar}id> ${symbol_pound} 恢复某次提交的状态，恢复动作本身也创建次提交对象

git revert HEAD ${symbol_pound} 恢复最后一次提交的状态

查看文件diff

git diff <file> ${symbol_pound} 比较当前文件和暂存区文件差异 git diff

git diff <id1><id2> ${symbol_pound} 比较两次提交之间的差异

git diff <branch1>..<branch2> ${symbol_pound} 在两个分支之间比较

git diff --staged ${symbol_pound} 比较暂存区和版本库差异

git diff --cached ${symbol_pound} 比较暂存区和版本库差异

git diff --stat ${symbol_pound} 仅仅比较统计信息



查看提交记录

git log git log <file> ${symbol_pound} 查看该文件每次提交记录

git log -p <file> ${symbol_pound} 查看每次详细修改内容的diff

git log -p -2 ${symbol_pound} 查看最近两次详细修改内容的diff

git log --stat ${symbol_pound}查看提交统计信息

tig
Mac上可以使用tig代替diff和log，brew install tig


Git 本地分支管理
查看、切换、创建和删除分支

git br -r ${symbol_pound} 查看远程分支

git br <new_branch> ${symbol_pound} 创建新的分支

git br -v ${symbol_pound} 查看各个分支最后提交信息

git br --merged ${symbol_pound} 查看已经被合并到当前分支的分支

git br --no-merged ${symbol_pound} 查看尚未被合并到当前分支的分支

git co <branch> ${symbol_pound} 切换到某个分支

git co -b <new_branch> ${symbol_pound} 创建新的分支，并且切换过去

git co -b <new_branch> <branch> ${symbol_pound} 基于branch创建新的new_branch

git co ${symbol_dollar}id ${symbol_pound} 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除

git co ${symbol_dollar}id -b <new_branch> ${symbol_pound} 把某次历史提交记录checkout出来，创建成一个分支

git br -d <branch> ${symbol_pound} 删除某个分支

git br -D <branch> ${symbol_pound} 强制删除某个分支 (未被合并的分支被删除的时候需要强制)


 分支合并和rebase

git merge <branch> ${symbol_pound} 将branch分支合并到当前分支

git merge origin/master --no-ff ${symbol_pound} 不要Fast-Foward合并，这样可以生成merge提交

git rebase master <branch> ${symbol_pound} 将master rebase到branch，相当于： git co <branch> && git rebase master && git co master && git merge <branch>


 Git补丁管理(方便在多台机器上开发同步时用)

git diff > ../sync.patch ${symbol_pound} 生成补丁

git apply ../sync.patch ${symbol_pound} 打补丁

git apply --check ../sync.patch ${symbol_pound}测试补丁能否成功



 Git暂存管理

git stash ${symbol_pound} 暂存

git stash list ${symbol_pound} 列所有stash

git stash apply ${symbol_pound} 恢复暂存的内容

git stash drop ${symbol_pound} 删除暂存区

Git远程分支管理

git pull ${symbol_pound} 抓取远程仓库所有分支更新并合并到本地

git pull --no-ff ${symbol_pound} 抓取远程仓库所有分支更新并合并到本地，不要快进合并

git fetch origin ${symbol_pound} 抓取远程仓库更新

git merge origin/master ${symbol_pound} 将远程主分支合并到本地当前分支

git co --track origin/branch ${symbol_pound} 跟踪某个远程分支创建相应的本地分支

git co -b <local_branch> origin/<remote_branch> ${symbol_pound} 基于远程分支创建本地分支，功能同上


git push ${symbol_pound} push所有分支

git push origin master ${symbol_pound} 将本地主分支推到远程主分支

git push -u origin master ${symbol_pound} 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)

git push origin <local_branch> ${symbol_pound} 创建远程分支， origin是远程仓库名

git push origin <local_branch>:<remote_branch> ${symbol_pound} 创建远程分支

git push origin :<remote_branch> ${symbol_pound}先删除本地分支(git br -d <branch>)，然后再push删除远程分支



Git远程仓库管理

git remote -v ${symbol_pound} 查看远程服务器地址和仓库名称

git remote show origin ${symbol_pound} 查看远程服务器仓库状态

git remote add origin git@ github:robbin/robbin_site.git ${symbol_pound} 添加远程仓库地址

git remote set-url origin git@ github.com:robbin/robbin_site.git ${symbol_pound} 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> ${symbol_pound} 删除远程仓库


创建远程仓库

git clone --bare robbin_site robbin_site.git ${symbol_pound} 用带版本的项目创建纯版本仓库

scp -r my_project.git git@ git.csdn.net:~ ${symbol_pound} 将纯仓库上传到服务器上

mkdir robbin_site.git && cd robbin_site.git && git --bare init ${symbol_pound} 在服务器创建纯仓库

git remote add origin git@ github.com:robbin/robbin_site.git ${symbol_pound} 设置远程仓库地址

git push -u origin master ${symbol_pound} 客户端首次提交

git push -u origin develop ${symbol_pound} 首次将本地develop分支提交到远程develop分支，并且track

git remote set-head origin master ${symbol_pound} 设置远程仓库的HEAD指向master分支



也可以命令设置跟踪远程库和本地库

git branch --set-upstream master origin/master

git branch --set-upstream develop origin/develop
 
转载地址：http://1ke.co/course/194
延伸阅读：http://1ke.co/course/342
同时可以看progit.pdf比较全的git资料。。。。